generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String? // Optional for third-party logins
  image             String? // Profile picture
  role              Role      @default(STUDENT)
  createdAt         DateTime  @default(now())
  isVerified        Boolean   @default(false)
  verificationToken String?
  tokenExpiry       DateTime?

  // Relations
  accounts       Account[] // Added for NextAuth
  sessions       Session[] // Added for NextAuth
  coursesCreated Course[]       @relation("TeacherCourses") // Courses created by this user (if teacher)
  enrollments    Enrollment[]
  certificates   Certificate[]
  Notification   Notification[]
  Review         Review[]
  Payment        Payment[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses Course[]
}

model Course {
  id                 String   @id @default(uuid())
  title              String
  description        String
  price              Float
  discountPercentage Float?
  discountedPrice    Float?
  duration           String?
  level              String?
  requirements       String?
  tags               String?
  thumbnail          String?
  published          Boolean  @default(false)
  teacherId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          String? // User who created the course
  updatedBy          String? // User who last updated the course
  categoryId         String?

  // Relations
  category     Category?     @relation(fields: [categoryId], references: [id])
  teacher      User          @relation("TeacherCourses", fields: [teacherId], references: [id])
  enrollments  Enrollment[]
  lessons      Lesson[]
  quizzes      Quiz[]
  attachments  Attachment[]
  certificates Certificate[]
  Review       Review[]
  Payment      Payment[]
}

model Enrollment {
  id        String  @id @default(uuid())
  userId    String
  courseId  String
  progress  Int     @default(0) // Progress in percentage
  completed Boolean @default(false)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  // Unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
}

model Lesson {
  id       String @id @default(uuid())
  title    String
  videoUrl String // Supports YouTube & uploaded videos
  courseId String

  // Relations
  course Course @relation(fields: [courseId], references: [id])
  quiz   Quiz? // One-to-one relation with Quiz (Quiz references Lesson)
}

model Quiz {
  id            String   @id @default(uuid())
  lessonId      String   @unique // Must be unique for one-to-one relation
  question      String
  options       String[] // Multiple choice options
  correctAnswer String

  // Relations
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Attachment {
  id       String @id @default(uuid())
  name     String
  fileUrl  String
  courseId String

  // Relations
  course Course @relation(fields: [courseId], references: [id])
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  issuedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  // Unique constraint to ensure one certificate per course per user
  @@unique([userId, courseId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  rating    Int // Rating out of 5
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  amount    Float
  status    String // e.g., "completed", "pending", "failed"
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}
